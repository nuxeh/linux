/*
 * Copyright (c) 2015, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

/ {
	ov23850_a@10 {
		compatible = "nvidia,ov23850";

		/* Physical dimensions of sensor */
		physical_w = "7.3998";
		physical_h = "5.5998";

		/* Define any required hw resources needed by driver */
		/* ie. clocks, io pins, power sources */
		avdd-reg = "vana";
		dvdd-reg = "vdig";
		iovdd-reg = "vif";
		vcmvdd-reg = "vvcm";

		/**
		* Generic formula to calculate different parameters.
		* Please add the formula in proper parenthesis.
		* Formula must contain only these operators '*' '/' '+' '-' '(' ')'
		* Formula containing both numbers and variables is supported. Refer example #3.
		* There must be atleast one operator inside the parenthesis. Refer example #4.
		* Don't use spaces. Refer example #5.
		*
		* Examples -
		* 1. formula = "(powerx+powery)+(exposure*2)"; /// correct example
		* 2. formula = "((2*(6-1))/2)*4";          /// correct example
		* 3. formula = "((powerx*(6-1))/2)*4";     /// correct example
		* 4. formula = "((2*(6-1))*2)/(2)";        /// incorrect example - extra use of parenthesis
		* 5. formula = "((2*(6-1)) / 2)*4";        /// incorrect example - use of spaces
		*/

		/**
		* A modeX node is required to support v4l2 driver
		* implementation with NVIDIA camera software stack
		*
		* mclk_khz = "";
		* Standard MIPI driving clock, typically 24MHz
		*
		* num_lanes = "";
		* Number of lane channels sensor is programmed to output
		*
		* tegra_sinterface = "";
		* The base tegra serial interface lanes are connected to
		*
		* discontinuous_clk = "";
		* The sensor is programmed to use a discontinuous clock on MIPI lanes
		*
		* dpcm_enable = "true";
		* The sensor is programmed to use a DPCM modes
		*
		* cil_settletime = "";
		* MIPI lane settle time value.
		* A "0" value attempts to autocalibrate based on mclk_multiplier
		*
		*
		*
		*
		* active_w = "";
		* Pixel active region width
		*
		* active_h = "";
		* Pixel active region height
		*
		* pixel_t = "";
		* The sensor readout pixel pattern
		*
		* readout_orientation = "0";
		* Based on camera module orientation.
		* Only change readout_orientation if you specifically
		* Program a different readout order for this mode
		*
		* line_length = "";
		* Pixel line length (width) for sensor mode.
		* This is used to calibrate features in our camera stack.
		*
		* mclk_multiplier = "";
		* Multiplier to MCLK to help time hardware capture sequence
		* TODO: Assign to PLL_Multiplier as well until fixed in core
		*
		* pix_clk_hz = "";
		* Sensor pixel clock used for calculations like exposure and framerate
		*
		*
		*
		*
		* inherent_gain = "";
		* Gain obtained inherently from mode (ie. pixel binning)
		*
		* min_gain_val = "";
		* max_gain_val = "";
		* Gain limits for mode
		*
		* min_exp_time = "";
		* max_exp_time = "";
		* Exposure Time limits for mode (us)
		*
		*
		* min_hdr_ratio = "";
		* max_hdr_ratio = "";
		* HDR Ratio limits for mode
		*
		* min_framerate = "";
		* max_framerate = "";
		* Framerate limits for mode (fps)
		*
		*/

		mode0 { // OV23850_MODE_5632X4224
			mclk_khz = "24000";
			num_lanes = "4";
			tegra_sinterface = "serial_a";
			discontinuous_clk = "no";
			dpcm_enable = "false";
			cil_settletime = "0";

			active_w = "5632";
			active_h = "4224";
			pixel_t = "bayer_bggr";
			readout_orientation = "270";
			line_length = "7200";
			inherent_gain = "1";
			mclk_multiplier = "31.25";
			pix_clk_hz = "750000000";

			min_gain_val = "1.0";
			max_gain_val = "16.0";
			min_hdr_ratio = "1";
			max_hdr_ratio = "64";
			min_framerate = "1.462526";
			max_framerate = "20";
			min_exp_time = "13";
			max_exp_time = "683709";
		};

		mode1 { // OV23850_MODE_5632X3168
			mclk_khz = "24000";
			num_lanes = "4";
			tegra_sinterface = "serial_a";
			discontinuous_clk = "no";
			dpcm_enable = "false";
			cil_settletime = "0";

			active_w = "5632";
			active_h = "3168";
			pixel_t = "bayer_bggr";
			readout_orientation = "270";
			line_length = "7108";
			inherent_gain = "1";
			mclk_multiplier = "31.25";
			pix_clk_hz = "750000000";

			min_gain_val = "1.0";
			max_gain_val = "16.0";
			min_hdr_ratio = "1";
			max_hdr_ratio = "64";
			min_framerate = "1.462526";
			max_framerate = "30";
			min_exp_time = "13";
			max_exp_time = "683709";
		};
	};

	ov23850_c@36 {
		compatible = "nvidia,ov23850";

		/* Physical dimensions of sensor */
		physical_w = "7.3998";
		physical_h = "5.5998";

		/* Define any required hw resources needed by driver */
		/* ie. clocks, io pins, power sources */
		avdd-reg = "vana";
		dvdd-reg = "vdig";
		iovdd-reg = "vif";
		vcmvdd-reg = "vvcm";

		mode0 { // OV23850_MODE_5632X4224
			mclk_khz = "24000";
			num_lanes = "4";
			tegra_sinterface = "serial_c";
			discontinuous_clk = "no";
			dpcm_enable = "false";
			cil_settletime = "0";

			active_w = "5632";
			active_h = "4224";
			pixel_t = "bayer_bggr";
			readout_orientation = "270";
			line_length = "7200";
			inherent_gain = "1";
			mclk_multiplier = "31.25";
			pix_clk_hz = "750000000";

			min_gain_val = "1.0";
			max_gain_val = "16.0";
			min_hdr_ratio = "1";
			max_hdr_ratio = "64";
			min_framerate = "1.462526";
			max_framerate = "20";
			min_exp_time = "13";
			max_exp_time = "683709";
		};

		mode1 { // OV23850_MODE_5632X3168
			mclk_khz = "24000";
			num_lanes = "4";
			tegra_sinterface = "serial_c";
			discontinuous_clk = "no";
			dpcm_enable = "false";
			cil_settletime = "0";

			active_w = "5632";
			active_h = "3168";
			pixel_t = "bayer_bggr";
			readout_orientation = "270";
			line_length = "7108";
			inherent_gain = "1";
			mclk_multiplier = "31.25";
			pix_clk_hz = "750000000";

			min_gain_val = "1.0";
			max_gain_val = "16.0";
			min_hdr_ratio = "1";
			max_hdr_ratio = "64";
			min_framerate = "1.462526";
			max_framerate = "30";
			min_exp_time = "13";
			max_exp_time = "683709";
		};
	};

	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		/**
		* The general guideline for naming badge_info contains 3 parts, and is as follows,
		* The first part is the camera_board_id for the module; if the module is in a FFD
		* platform, then use the platform name for this part.
		* The second part contains the position of the module, ex. “rear” or “front”.
		* The third part contains the last 6 characters of a part number which is found
		* in the module's specsheet from the vender.
		*/
		modules {
			module0 {
				badge = "e3323_bottom_CH06P1";
				position = "bottom";
				orientation = "3";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_soc_sensor";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/ov23850_a@10";
				};
			};
			module1 {
				badge = "e3323_top_CH06P1";
				position = "top";
				orientation = "3";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_soc_sensor";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/ov23850_c@36";
				};
			};
		};
	};
};
