/*
 * tegra210_ahub_utils.h - Tegra AHUB common register header.
 *
 * Author: Sumit Bhattacharya <sumitb@nvidia.com>
 * Based on code by Stephen Warren <swarren@nvidia.com>
 *
 * Copyright (C) 2013-2014, NVIDIA CORPORATION. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 */

#ifndef __TEGRA210_AHUB_UTILS_H
#define __TEGRA210_AHUB_UTILS_H

/* Sleep time between consecutive AHUB register status read */
#define AHUB_OP_SLEEP_US			100
/* Maximum retry count for any AHUB operation to complete */
#define AHUB_OP_MAX_RETRY			10

enum tegra210_cif_dir {
	DIR_RX,
	DIR_TX,
	DIR_NUM,
};

enum tegra210_ahub_cifs {
	CIF_NONE,

	/* RX CIFS */
	ADMAIF_RX1,
	ADMAIF_RX2,
	ADMAIF_RX3,
	ADMAIF_RX4,
	ADMAIF_RX5,
	ADMAIF_RX6,
	ADMAIF_RX7,
	ADMAIF_RX8,
	ADMAIF_RX9,
	ADMAIF_RX10,

	I2S1_RX0,
	I2S2_RX0,
	I2S3_RX0,
	I2S4_RX0,
	I2S5_RX0,

	SFC1_RX0,
	SFC2_RX0,
	SFC3_RX0,
	SFC4_RX0,

	MIXER_RX1,
	MIXER_RX2,
	MIXER_RX3,
	MIXER_RX4,
	MIXER_RX5,
	MIXER_RX6,
	MIXER_RX7,
	MIXER_RX8,
	MIXER_RX9,
	MIXER_RX10,

	SPDIF1_RX0,
	SPDIF2_RX0,

	AFC1_RX0,
	AFC2_RX0,
	AFC3_RX0,
	AFC4_RX0,
	AFC5_RX0,
	AFC6_RX0,

	OPE1_RX0,
	OPE2_RX0,

	SPKPROT1_RX0,

	MVC1_RX0,
	MVC2_RX0,

	AMX1_RX1,
	AMX1_RX2,
	AMX1_RX3,
	AMX1_RX4,
	AMX2_RX1,
	AMX2_RX2,
	AMX2_RX3,
	AMX2_RX4,

	ADX1_RX0,
	ADX2_RX0,

	/* TX CIFS */
	ADMAIF_TX1,
	ADMAIF_TX2,
	ADMAIF_TX3,
	ADMAIF_TX4,
	ADMAIF_TX5,
	ADMAIF_TX6,
	ADMAIF_TX7,
	ADMAIF_TX8,
	ADMAIF_TX9,
	ADMAIF_TX10,

	I2S1_TX0,
	I2S2_TX0,
	I2S3_TX0,
	I2S4_TX0,
	I2S5_TX0,

	SFC1_TX0,
	SFC2_TX0,
	SFC3_TX0,
	SFC4_TX0,

	MIXER_TX1,
	MIXER_TX2,
	MIXER_TX3,
	MIXER_TX4,
	MIXER_TX5,

	AMX1_TX0,
	AMX2_TX0,

	SPDIF1_TX0,
	SPDIF2_TX0,

	AFC1_TX0,
	AFC2_TX0,
	AFC3_TX0,
	AFC4_TX0,
	AFC5_TX0,
	AFC6_TX0,

	OPE1_TX0,
	OPE2_TX0,

	SPKPROT1_TX0,

	MVC1_TX0,
	MVC2_TX0,

	IQC1_TX0,
	IQC2_TX0,

	DMIC1_TX0,
	DMIC2_TX0,
	DMIC3_TX0,

	ADX1_TX1,
	ADX1_TX2,
	ADX1_TX3,
	ADX1_TX4,
	ADX2_TX1,
	ADX2_TX2,
	ADX2_TX3,
	ADX2_TX4,

	MAX_CIF_ID = ADX2_TX4,
};

#define IS_RX(cif)		((cif >= ADMAIF_RX1) && (cif <= ADX2_RX0))
#define IS_TX(cif)		((cif >= ADMAIF_TX1) && (cif <= ADX2_TX4))

/* All module ID and CIF ID starts from 0 */
/* ADMAIF speicific macros */
#define ADMAIF_INSTANCE		1
#define ADMAIF_CIF_COUNT	10

#define ADMAIF_RX_SHIFT(cif)	(cif - ADMAIF_RX1)
#define ADMAIF_TX_SHIFT(cif)	(cif - ADMAIF_TX1)
#define IS_ADMAIF_RX(cif)	((cif >= ADMAIF_RX1) && (cif <= ADMAIF_RX10))
#define IS_ADMAIF_TX(cif)	((cif >= ADMAIF_TX1) && (cif <= ADMAIF_TX10))
#define IS_ADMAIF(cif)		(IS_ADMAIF_RX(cif) || IS_ADMAIF_TX(cif))
#define ADMAIF_ID(cif)		0
#define ADMAIF_CIF_ID(cif)	(IS_ADMAIF_RX(cif) ? (cif - ADMAIF_RX1) : \
						     (cif - ADMAIF_TX1))

/* I2S speicific macros */
#define I2S_RX_SHIFT(cif)	(cif - I2S1_RX0)
#define I2S_TX_SHIFT(cif)	(cif - I2S1_TX0)
#define IS_I2S_RX(cif)		((cif >= I2S1_RX0) && (cif <= I2S5_RX0))
#define IS_I2S_TX(cif)		((cif >= I2S1_TX0) && (cif <= I2S5_TX0))
#define IS_I2S(cif)		(IS_I2S_RX(cif) || IS_I2S_TX(cif))
#define I2S_ID(cif)		(IS_I2S_RX(cif) ? (cif - I2S1_RX0) : \
						  (cif - I2S1_TX0))
#define I2S_CIF_ID(cif)		0

/* SFC speicific macros */
#define SFC_RX_SHIFT(cif)	(cif - SFC1_RX0)
#define SFC_TX_SHIFT(cif)	(cif - SFC1_TX0)
#define IS_SFC_RX(cif)		((cif >= SFC1_RX0) && (cif <= SFC4_RX0))
#define IS_SFC_TX(cif)		((cif >= SFC1_TX0) && (cif <= SFC4_TX0))
#define IS_SFC(cif)		(IS_SFC_RX(cif) || IS_SFC_TX(cif))
#define SFC_ID(cif)		(IS_SFC_RX(cif) ? (cif - SFC1_RX0) : \
						  (cif - SFC1_TX0))
#define SFC_CIF_ID(cif)		0

/* MIXER speicific macros */
#define MIXER_RX_SHIFT(cif)	(cif - MIXER_RX1)
#define MIXER_TX_SHIFT(cif)	(cif - MIXER_TX1)
#define IS_MIXER_RX(cif)	((cif >= MIXER_RX1) && (cif <= MIXER_RX10))
#define IS_MIXER_TX(cif)	((cif >= MIXER_TX1) && (cif <= MIXER_TX5))
#define IS_MIXER(cif)		(IS_MIXER_RX(cif) || IS_MIXER_TX(cif))
#define MIXER_ID(cif)		0
#define MIXER_CIF_ID(cif)	(IS_MIXER_RX(cif) ? (cif - MIXER_RX1) : \
						    (cif - MIXER_TX1))

/* SPDIF speicific macros */
#define SPDIF_RX_SHIFT(cif)	(cif - SPDIF1_RX0)
#define SPDIF_TX_SHIFT(cif)	(cif - SPDIF1_TX0)
#define IS_SPDIF_RX(cif)	((cif >= SPDIF1_RX0) && (cif <= SPDIF2_RX0))
#define IS_SPDIF_TX(cif)	((cif >= SPDIF2_TX0) && (cif <= SPDIF2_TX0))
#define IS_SPDIF(cif)		(IS_SPDIF_RX(cif) || IS_SPDIF_TX(cif))
#define SPDIF_ID(cif)		(IS_SPDIF_RX(cif) ? (cif - SPDIF1_RX0) : \
						    (cif - SPDIF1_TX0))
#define SPDIF_CIF_ID(cif)	0

/* AFC speicific macros */
#define AFC_RX_SHIFT(cif)	(cif - AFC1_RX0)
#define AFC_TX_SHIFT(cif)	(cif - AFC1_TX0)
#define IS_AFC_RX(cif)		((cif >= AFC1_RX0) && (cif <= AFC6_RX0))
#define IS_AFC_TX(cif)		((cif >= AFC1_TX0) && (cif <= AFC6_TX0))
#define IS_AFC(cif)		(IS_AFC_RX(cif) || IS_AFC_TX(cif))
#define AFC_ID(cif)		(IS_AFC_RX(cif) ? (cif - AFC1_RX0) : \
						  (cif - AFC1_TX0))
#define AFC_CIF_ID(cif)		0

/* OPE speicific macros */
#define OPE_RX_SHIFT(cif)	(cif - OPE1_RX0)
#define OPE_TX_SHIFT(cif)	(cif - OPE1_TX0)
#define IS_OPE_RX(cif)		((cif >= OPE1_RX0) && (cif <= OPE2_RX0))
#define IS_OPE_TX(cif)		((cif >= OPE1_TX0) && (cif <= OPE2_TX0))
#define IS_OPE(cif)		(IS_OPE_RX(cif) || IS_OPE_TX(cif))
#define OPE_ID(cif)		(IS_OPE_RX(cif) ? (cif - OPE1_RX0) : \
						  (cif - OPE1_TX0))
#define OPE_CIF_ID(cif)		0

/* SPKPROT speicific macros */
#define SPKPROT_RX_SHIFT(cif)	(cif - SPKPROT1_RX0)
#define SPKPROT_TX_SHIFT(cif)	(cif - SPKPROT1_TX0)
#define IS_SPKPROT_RX(cif)	((cif >= SPKPROT1_RX0) && (cif <= SPKPROT1_RX0))
#define IS_SPKPROT_TX(cif)	((cif >= SPKPROT1_TX0) && (cif <= SPKPROT1_TX0))
#define IS_SPKPROT(cif)		(IS_SPKPROT_RX(cif) || IS_SPKPROT_TX(cif))
#define SPKPROT_ID(cif)		(IS_SPKPROT_RX(cif) ? (cif - SPKPROT1_RX0) : \
						      (cif - SPKPROT1_TX0))
#define SPKPROT_CIF_ID(cif)	0

/* MVC speicific macros */
#define MVC_RX_SHIFT(cif)	(cif - MVC1_RX0)
#define MVC_TX_SHIFT(cif)	(cif - MVC1_TX0)
#define IS_MVC_RX(cif)		((cif >= MVC1_RX0) && (cif <= MVC2_RX0))
#define IS_MVC_TX(cif)		((cif >= MVC1_TX0) && (cif <= MVC2_TX0))
#define IS_MVC(cif)		(IS_MVC_RX(cif) || IS_MVC_TX(cif))
#define MVC_ID(cif)		(IS_MVC_RX(cif) ? (cif - MVC1_RX0) : \
						  (cif - MVC1_TX0))
#define MVC_CIF_ID(cif)		0

/* AMX speicific macros */
#define AMX_RX_SHIFT(cif)	(cif - AMX1_RX1)
#define AMX_TX_SHIFT(cif)	(cif - AMX1_TX0)
#define AMX_RX_CIF_COUNT	4
#define AMX_TX_CIF_COUNT	2
#define IS_AMX_RX(cif)		((cif >= AMX1_RX1) && (cif <= AMX2_RX4))
#define IS_AMX_TX(cif)		((cif >= AMX1_TX0) && (cif <= AMX2_TX0))
#define IS_AMX(cif)		(IS_AMX_RX(cif) || IS_AMX_TX(cif))
#define AMX_ID(cif)		(IS_AMX_RX(cif) ? \
				((cif - AMX1_RX1) / AMX_RX_CIF_COUNT) : \
				((cif - AMX1_TX0)) / AMX_TX_CIF_COUNT)
#define AMX_CIF_ID(cif)		(IS_AMX_RX(cif) ? \
				((cif - AMX1_RX1) % AMX_RX_CIF_COUNT) : \
				((cif - AMX1_TX0)) % AMX_TX_CIF_COUNT)

/* ADX speicific macros */
#define ADX_RX_SHIFT(cif)	(cif - ADX1_RX0)
#define ADX_TX_SHIFT(cif)	(cif - ADX1_TX1)
#define ADX_RX_CIF_COUNT	4
#define ADX_TX_CIF_COUNT	2
#define IS_ADX_RX(cif)		((cif >= ADX1_RX0) && (cif <= ADX2_RX0))
#define IS_ADX_TX(cif)		((cif >= ADX1_TX1) && (cif <= ADX2_TX4))
#define IS_ADX(cif)		(IS_ADX_RX(cif) || IS_ADX_TX(cif))
#define ADX_ID(cif)		(IS_ADX_RX(cif) ? \
				((cif - ADX1_RX0) / ADX_RX_CIF_COUNT) : \
				((cif - ADX1_TX1)) / ADX_TX_CIF_COUNT)
#define ADX_CIF_ID(cif)		(IS_ADX_RX(cif) ? \
				((cif - ADX1_RX0) % ADX_RX_CIF_COUNT) : \
				((cif - ADX1_TX1)) % ADX_TX_CIF_COUNT)

/* IQC speicific macros */
#define IQC_TX_SHIFT(cif)	(cif - IQC1_TX0)
#define IS_IQC_RX(cif)		0
#define IS_IQC_TX(cif)		((cif >= IQC1_TX0) && (cif <= IQC2_TX0))
#define IS_IQC(cif)		IS_IQC_RX(cif)
#define IQC_ID(cif)		(cif - IQC1_TX0)
#define IQC_CIF_ID(cif)		0

/* DMIC speicific macros */
#define DMIC_TX_SHIFT(cif)	(cif - DMIC1_TX0)
#define IS_DMIC_RX(cif)		0
#define IS_DMIC_TX(cif)		((cif >= DMIC1_TX0) && (cif <= DMIC3_TX0))
#define IS_DMIC(cif)		IS_DMIC_TX(cif)
#define DMIC_ID(cif)		(cif - DMIC1_TX0)
#define DMIC_CIF_ID(cif)	0

/* Maximum RX CIF port for any module */

#define IS_TX_CIF(x)		((x >= CIF_TX0) && (x <= CIF_TX9))
#define IS_RX_CIF(x)		((x >= CIF_RX0) && (x <= CIF_RX9))
#define CIF_ID(x)		(IS_TX_CIF(x) ? (x - CIF_TX0) : (x - CIF_RX0))
#define CIF_ID_TO_CIF(x, dir)	((dir == CIF_DIR_RX) ? (x + CIF_RX0) : \
						       (x + CIF_TX0))

/* Fields for TEGRA210_*_ACIF_*_CTRL */
#define CIF_PACK_MODE_NONE				0
#define CIF_PACK_MODE_8					1
#define CIF_PACK_MODE_16				2

#define TEGRA210_AXBAR_CIF_CTRL_PACK8_ENABLE_SHIFT	31
#define TEGRA210_AXBAR_CIF_CTRL_PACK8_ENABLE		BIT(TEGRA210_AXBAR_CIF_CTRL_PACK8_ENABLE_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_PACK16_ENABLE_SHIFT	30
#define TEGRA210_AXBAR_CIF_CTRL_PACK16_ENABLE		BIT(TEGRA210_AXBAR_CIF_CTRL_PACK16_ENABLE_SHIFT)

#define CIF_UNPACK_MODE_NONE				0
#define CIF_UNPACK_MODE_8					1
#define CIF_UNPACK_MODE_16					2

#define TEGRA210_AXBAR_CIF_CTRL_UNPACK8_ENABLE_SHIFT	31
#define TEGRA210_AXBAR_CIF_CTRL_UNPACK8_ENABLE		BIT(TEGRA210_AXBAR_CIF_CTRL_UNPACK8_ENABLE_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_UNPACK16_ENABLE_SHIFT	30
#define TEGRA210_AXBAR_CIF_CTRL_UNPACK16_ENABLE		BIT(TEGRA210_AXBAR_CIF_CTRL_UNPACK16_ENABLE_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_FIFO_THRESHOLD_SHIFT	24
#define TEGRA210_AXBAR_CIF_CTRL_FIFO_THRESHOLD_MASK	(0x3f << TEGRA210_AXBAR_CIF_CTRL_FIFO_THRESHOLD_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT	20
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_MASK		(0xf << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH1		(0 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH2		(1 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH3		(2 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH4		(3 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH5		(4 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH6		(5 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH7		(6 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH8		(7 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH9		(8 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH10		(9 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH11		(10 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH12		(11 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH13		(12 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH14		(13 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH15		(14 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_CH16		(15 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_CHAN_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT	16
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_MASK	(0xf << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH1		(0 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH2		(1 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH3		(2 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH4		(3 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH5		(4 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH6		(5 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH7		(6 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH8		(7 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH9		(8 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH10	(9 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH11	(10 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH12	(11 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH13	(12 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH14	(13 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH15	(14 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_CH16	(15 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_CHAN_SHIFT)

#define CIF_BIT4					0
#define CIF_BIT8					1
#define CIF_BIT12					2
#define CIF_BIT16					3
#define CIF_BIT20					4
#define CIF_BIT24					5
#define CIF_BIT28					6
#define CIF_BIT32					7

#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT	12
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_MASK		(0x7 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_BIT4		(CIF_BIT4 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_BIT8		(CIF_BIT8 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_BIT12	(CIF_BIT12 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_BIT16	(CIF_BIT16 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_BIT20	(CIF_BIT20 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_BIT24	(CIF_BIT24 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_BIT28	(CIF_BIT28 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_BIT32	(CIF_BIT32 << TEGRA210_AXBAR_CIF_CTRL_AXBAR_BITS_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT	8
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_MASK	(0x7 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_BIT4	(CIF_BIT4 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_BIT8	(CIF_BIT8 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_BIT12	(CIF_BIT12 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_BIT16	(CIF_BIT16 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_BIT20	(CIF_BIT20 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_BIT24	(CIF_BIT24 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_BIT28	(CIF_BIT28 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_BIT32	(CIF_BIT32 << TEGRA210_AXBAR_CIF_CTRL_CLIENT_BITS_SHIFT)

#define CIF_EXPAND_ZERO					0
#define CIF_EXPAND_ONE					1
#define CIF_EXPAND_LFSR					2
#define CIF_EXPAND_RSVD					3

#define TEGRA210_AXBAR_CIF_CTRL_EXPAND_SHIFT		6
#define TEGRA210_AXBAR_CIF_CTRL_EXPAND_MASK		(0x3 << TEGRA210_AXBAR_CIF_CTRL_EXPAND_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_EXPAND_ZERO		(CIF_EXPAND_ZERO << TEGRA210_AXBAR_CIF_CTRL_EXPAND_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_EXPAND_ONE		(CIF_EXPAND_ONE << TEGRA210_AXBAR_CIF_CTRL_EXPAND_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_EXPAND_LFSR		(CIF_EXPAND_LFSR << TEGRA210_AXBAR_CIF_CTRL_EXPAND_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_EXPAND_RSVD		(CIF_EXPAND_RSVD << TEGRA210_AXBAR_CIF_CTRL_EXPAND_SHIFT)


#define CIF_STEREO_CONV_CH0				0
#define CIF_STEREO_CONV_CH1				1
#define CIF_STEREO_CONV_AVG				2
#define CIF_STEREO_CONV_RSVD				3

#define TEGRA210_AXBAR_CIF_CTRL_STEREO_CONV_SHIFT	4
#define TEGRA210_AXBAR_CIF_CTRL_STEREO_CONV_MASK	(0x3 << TEGRA210_AXBAR_CIF_CTRL_STEREO_CONV_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_STEREO_CONV_CH0		(CIF_STEREO_CONV_CH0 << TEGRA210_AXBAR_CIF_CTRL_DIR_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_STEREO_CONV_CH1		(CIF_STEREO_CONV_CH1 << TEGRA210_AXBAR_CIF_CTRL_DIR_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_STEREO_CONV_AVG		(CIF_STEREO_CONV_AVG << TEGRA210_AXBAR_CIF_CTRL_DIR_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_STEREO_CONV_RSVD	(CIF_STEREO_CONV_RSVD << TEGRA210_AXBAR_CIF_CTRL_DIR_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_REPLICATE_SHIFT		2
#define TEGRA210_AXBAR_CIF_CTRL_REPLICATE		BIT(TEGRA210_AXBAR_CIF_CTRL_REPLICATE_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_DIRECTION_TXCIF		(CIF_DIRECTION_TXCIF << TEGRA210_AXBAR_CIF_CTRL_DIRECTION_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_DIRECTION_RXCIF		(CIF_DIRECTION_RXCIF << TEGRA210_AXBAR_CIF_CTRL_DIRECTION_SHIFT)

#define CIF_TRUNCATE_ROUND				0
#define CIF_TRUNCATE_CHOP				1

#define TEGRA210_AXBAR_CIF_CTRL_TRUNCATE_SHIFT		1
#define TEGRA210_AXBAR_CIF_CTRL_TRUNCATE_MASK		(0x1 << TEGRA210_AXBAR_CIF_CTRL_TRUNCATE_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_TRUNCATE_CHOP		(CIF_TRUNCATE_CHOP << TEGRA210_AXBAR_CIF_CTRL_TRUNCATE_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_TRUNCATE_ROUND		(CIF_TRUNCATE_ROUND << TEGRA210_AXBAR_CIF_CTRL_TRUNCATE_SHIFT)

#define CIF_MONO_CONV_ZERO				0
#define CIF_MONO_CONV_COPY				1

#define TEGRA210_AXBAR_CIF_CTRL_MONO_CONV_SHIFT		0
#define TEGRA210_AXBAR_CIF_CTRL_MONO_CONV_MASK		(0x1 << TEGRA210_AXBAR_CIF_CTRL_MONO_CONV_SHIFT)

#define TEGRA210_AXBAR_CIF_CTRL_MONO_CONV_ZERO		(CIF_MONO_CONV_ZERO << TEGRA210_AXBAR_CIF_CTRL_MONO_CONV_SHIFT)
#define TEGRA210_AXBAR_CIF_CTRL_MONO_CONV_COPY		(CIF_MONO_CONV_COPY << TEGRA210_AXBAR_CIF_CTRL_MONO_CONV_SHIFT)

/* Fields for TEGRA210_*_AHUBRAMCTL_*_CTRL */
#define TEGRA210_AHUBRAMCTL_CTRL_READ_BUSY_BUSY		BIT(31)

#define TEGRA210_AHUBRAMCTL_CTRL_SEQ_READ_COUNT_SHIFT	16
#define TEGRA210_AHUBRAMCTL_CTRL_SEQ_READ_COUNT_MASK	(0xff << TEGRA210_AHUBRAMCTL_CTRL_SEQ_READ_COUNT_SHIFT)

#define TEGRA210_AHUBRAMCTL_CTRL_RW_SHIFT		14
#define TEGRA210_AHUBRAMCTL_CTRL_RW_MASK		0X1

#define TEGRA210_AHUBRAMCTL_CTRL_RW_READ		(0 << TEGRA210_AHUBRAMCTL_CTRL_RW_SHIFT)
#define TEGRA210_AHUBRAMCTL_CTRL_RW_WRITE		(1 << TEGRA210_AHUBRAMCTL_CTRL_RW_SHIFT)

#define TEGRA210_AHUBRAMCTL_CTRL_ADDR_INIT_EN		BIT(13)
#define TEGRA210_AHUBRAMCTL_CTRL_SEQ_ACCESS_EN		BIT(12)

#define TEGRA210_AHUBRAMCTL_CTRL_RAM_ADDR_SHIFT		0
#define TEGRA210_AHUBRAMCTL_CTRL_RAM_ADDR_MASK \
		(0X1ff << TEGRA210_AHUBRAMCTL_CTRL_RAM_ADDR_SHIFT)

/* Fields for TEGRA210_*_AHUBRAMCTL_*_DATA */
#define TEGRA210_AHUBRAMCTL_DATA_SHIFT			0
#define TEGRA210_AHUBRAMCTL_DATA_MASK			(0xffffffff << TEGRA210_AHUBRAMCTL_DATA_SHIFT)

struct tegra210_axbar_cif_param {
	u32 axbar_chan;
	u32 client_chan;
	u32 axbar_bits;
	u32 client_bits;
	u32 expand;
	u32 truncate;
	u32 mono_conv;
	u32 stereo_conv;
	u32 replicate;
	u32 threshold;
	u32 pack_mode;
	u32 unpack_mode;
	bool is_rx;
};

/* Common APIs for configuring ACIF for any AHUB module */
int tegra210_set_axbar_cif_param(struct device *dev, u32 reg,
				 struct tegra210_axbar_cif_param *acif);
int tegra210_get_axbar_cif_param(struct device *dev, u32 reg,
				 struct tegra210_axbar_cif_param *acif);

int tegra210_ahubram_write(struct device *dev, u32 reg_ctrl, u32 reg_data,
			  u32 start_addr, u32 *data, int size);
int tegra210_ahubram_read(struct device *dev, u32 reg_ctrl, u32 reg_data,
			  u32 start_addr, u32 *data, int size);
#endif
